{
    "atomType": "Molecule",
    "name": "Above",
    "x": 0,
    "y": 0,
    "uniqueID": "decd9514-fa8b-49ad-b680-2aaf10b00d00",
    "ioValues": [
        {
            "name": "B",
            "ioValue": 10,
            "currentEquation": null
        },
        {
            "name": "A",
            "ioValue": 10,
            "currentEquation": null
        }
    ],
    "topLevel": true,
    "allAtoms": [
        {
            "atomType": "Output",
            "name": "Output",
            "x": 0.98,
            "y": 0.5,
            "uniqueID": "ad4c172e-aa30-4882-98ab-cd0b17bf295e",
            "ioValues": []
        },
        {
            "atomType": "Input",
            "name": "B",
            "x": 0.029699999999999997,
            "y": 0.7186629526462396,
            "uniqueID": "5c1b7ead-f4ec-4f1b-82cd-7918220ec7e2",
            "ioValues": [],
            "type": "geometry"
        },
        {
            "atomType": "Input",
            "name": "A",
            "x": 0.029699999999999997,
            "y": 0.5013927576601671,
            "uniqueID": "a7d58c99-d925-408f-8907-9dcba644dcdd",
            "ioValues": [],
            "type": "geometry"
        },
        {
            "atomType": "Rectangle",
            "name": "Rectangle",
            "x": 0.18307426597582038,
            "y": 0.520891364902507,
            "uniqueID": "fe976da7-7255-4690-a1e8-d17a2d94f147",
            "ioValues": [
                {
                    "name": "x length",
                    "ioValue": 100,
                    "currentEquation": null
                },
                {
                    "name": "y length",
                    "ioValue": 10,
                    "currentEquation": null
                }
            ]
        },
        {
            "atomType": "Extrude",
            "name": "Extrude",
            "x": 0.35664939550949915,
            "y": 0.403899721448468,
            "uniqueID": "973ac7d9-b6c7-452b-9448-eda07059fee0",
            "ioValues": [
                {
                    "name": "height",
                    "ioValue": 10,
                    "currentEquation": null
                }
            ]
        },
        {
            "atomType": "Code",
            "name": "Code",
            "x": 0.5641534391534392,
            "y": 0.3147632311977716,
            "uniqueID": "a8feb98c-c85b-44c6-9776-9e049080d20a",
            "ioValues": [],
            "codeVersion": 1,
            "code": "\n      Inputs = [\n       {inputName: \"A\", type: \"geometry\", defaultValue: null},\n        {inputName: \"B\", type: \"geometry\", defaultValue: null}\n      ]\n      //This defines the molecules inputs and creates variables with the same names which can be referenced in the code\n\n      //Takes the address and gets the shape from the library\n      let importedShapeA = library[A]\n\n      let boundsA = await GetBounds(A);\n      let A_minZ = boundsA.min[2];\n\n      let B_maxZ = 0;\n      if(B){\n          let boundsB = await GetBounds(B);\n          console.log(\"Bounding Box B:  \");\n          console.log(boundsB);\n          B_maxZ  = boundsB.max[2];\n      }\n\n     let translationZ = B_maxZ - A_minZ;\n     \n      let movedOutput = await Move(A, 0, 0, translationZ);\n\n      return movedOutput;\n\n      // //We can also create a new shape from scratch\n      // let createdRectangle = replicad.drawRectangle(5,7)\n      // //This is the plane we are going to put our new shape on\n      // const newPlane = new replicad.Plane().pivot(0, 'Y');\n      // //And we extrude the shape to make it 3D\n      // let createdShape = createdRectangle.sketchOnPlane(newPlane).extrude(height)\n\n      // //For our new geometry we need to define the tags, color, plane, etc\n      // let shape2 = {\n      //     geometry: [createdShape],\n      //     tags: [\"aTag\"],\n      //     color: '#A3CE5B',\n      //     plane: newPlane,\n      //     bom: []\n      // }\n\n      // //Then we can return our created shape in just the same way\n      // //return shape2\n\n      // //If we want to return both shapes at once, we can create an assembly with them\n      // let anAssembly = {\n      //   geometry: [shape1, shape2],\n      //   tags: [\"aNewTag\"],\n      //   color: '#A3CF5B',\n      //   plane: newPlane,\n      //   bom: []\n      // }\n\n      // //And we can return that in the same way\n      // return anAssembly\n\n      /**\n      To Use the Code Atom, enter your inputs to the input list as an object array:\n      Inputs = [\n        {inputName: \"shape\", type: \"geometry\", defaultValue: null},\n        {inputName: \"dist\", type: \"number\", defaultValue: 5},\n        {inputName: \"height\", type: \"number\", defaultValue: 10}\n      ]\n      If your input is connected to another atom with a replicad geometry you can access its geometry by looking up its ID in your library. a.e library[Input1].geometry[0]\n      Use any replicad available methods to modify your geometry. Learn more about all of the available methods at\n      https://replicad.xyz/docs/introapp/UserGuide.html\n      Return a replicad object that includes geometry, color, tags and plane.\n\n      Example Code Atom:\n        Inputs = [\n          {inputName: \"shape\", type: \"geometry\", defaultValue: null},\n          {inputName: \"x\", type: \"number\", defaultValue: 5}\n        ]\n        let finalShape = library[shape].geometry[0].clone().translate([x,0,0])\n        return {geometry: finalShape, color: library[shape].color, plane: library[shape].plane, tags: library[shape].tags }\n      */\n      "
        },
        {
            "atomType": "Move",
            "name": "Move",
            "x": 0.460352422907489,
            "y": 0.6880222841225626,
            "uniqueID": "29fbd2bc-9d80-4354-bcfe-1957c92d48e6",
            "ioValues": [
                {
                    "name": "xDist",
                    "ioValue": 0,
                    "currentEquation": null
                },
                {
                    "name": "yDist",
                    "ioValue": 0,
                    "currentEquation": null
                },
                {
                    "name": "zDist",
                    "ioValue": 200,
                    "currentEquation": null
                }
            ]
        },
        {
            "atomType": "Assembly",
            "name": "Assembly",
            "x": 0.6806167400881057,
            "y": 0.584958217270195,
            "uniqueID": "a58c170a-30d5-4a9b-b943-bc142284e638",
            "ioValues": [
                {
                    "name": "Shape 1",
                    "ioValue": {
                        "geometry": "singular-3",
                        "dimension": "3D",
                        "plane": {
                            "origin": [
                                0,
                                0,
                                0
                            ],
                            "xDir": [
                                1,
                                0,
                                0
                            ],
                            "normal": [
                                0,
                                0,
                                1
                            ]
                        },
                        "color": "#aad7f2",
                        "tags": [],
                        "bom": []
                    }
                },
                {
                    "name": "Shape 2",
                    "ioValue": {
                        "geometry": "move-extrude-rectangle-100-10-{\"origin\":[0,0,0],\"xDir\":[1,0,0],\"normal\":[0,0,1]}-10-0-0-200",
                        "dimension": "3D",
                        "plane": {
                            "origin": [
                                0,
                                0,
                                0
                            ],
                            "xDir": [
                                1,
                                0,
                                0
                            ],
                            "normal": [
                                0,
                                0,
                                1
                            ]
                        },
                        "color": "#aad7f2",
                        "tags": [],
                        "bom": []
                    }
                }
            ]
        }
    ],
    "allConnectors": [
        {
            "ap1Name": "geometry",
            "ap2Name": "geometry",
            "ap1ID": "fe976da7-7255-4690-a1e8-d17a2d94f147",
            "ap2ID": "973ac7d9-b6c7-452b-9448-eda07059fee0"
        },
        {
            "ap1Name": "geometry",
            "ap2Name": "A",
            "ap1ID": "973ac7d9-b6c7-452b-9448-eda07059fee0",
            "ap2ID": "a8feb98c-c85b-44c6-9776-9e049080d20a"
        },
        {
            "ap1Name": "geometry",
            "ap2Name": "geometry",
            "ap1ID": "973ac7d9-b6c7-452b-9448-eda07059fee0",
            "ap2ID": "29fbd2bc-9d80-4354-bcfe-1957c92d48e6"
        },
        {
            "ap1Name": "output",
            "ap2Name": "number or geometry",
            "ap1ID": "a8feb98c-c85b-44c6-9776-9e049080d20a",
            "ap2ID": "ad4c172e-aa30-4882-98ab-cd0b17bf295e"
        },
        {
            "ap1Name": "output",
            "ap2Name": "Shape 1",
            "ap1ID": "a8feb98c-c85b-44c6-9776-9e049080d20a",
            "ap2ID": "a58c170a-30d5-4a9b-b943-bc142284e638"
        },
        {
            "ap1Name": "geometry",
            "ap2Name": "B",
            "ap1ID": "29fbd2bc-9d80-4354-bcfe-1957c92d48e6",
            "ap2ID": "a8feb98c-c85b-44c6-9776-9e049080d20a"
        },
        {
            "ap1Name": "geometry",
            "ap2Name": "Shape 2",
            "ap1ID": "29fbd2bc-9d80-4354-bcfe-1957c92d48e6",
            "ap2ID": "a58c170a-30d5-4a9b-b943-bc142284e638"
        }
    ],
    "unitsKey": "MM",
    "fileTypeVersion": 1,
    "compiledBom": [],
    "filetypeVersion": 1
}